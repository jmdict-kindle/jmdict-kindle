name: build

on:
  push:
  pull_request:
  schedule:
  - cron: '0 0 1 * *' # monthly

jobs:

  black:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - name: Check code Style
        uses: psf/black@stable
        with:
          options: "--check"
          src: "."

  build:
    needs: black
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 1
    - name: apt-update
      run: sudo apt-get update -qq
    - name: apt-install
      run: sudo apt-get install -qq -y --no-install-recommends python3-cairo python3-pil python3-htmlmin
    - name: make
      run: make ISWSL=FALSE
      env:
        MAKEFLAGS: -j2
        PYTHON3: /usr/bin/python3
    - name: upload-artifact
      uses: actions/upload-artifact@v2
      with:
        name: mobi
        path: '*.mobi'
  
  build_windows:
    needs: black
    runs-on: windows-2019
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 1
    #-----------------------------
    #Setup Windows and WSL
    #-----------------------------
    - uses: Vampire/setup-wsl@v1
      with:
        distribution: Ubuntu-18.04
        set-as-default: 'true'
        use-cache: 'true'
        additional-packages:
          make
          python3-cairo
          python3-pil
          python3-htmlmin
    #-----------------------------
    #donwload and install KindlePreviewer
    #-----------------------------
    - name: download Kindle Previewer
      run: Invoke-WebRequest -Uri "https://d2bzeorukaqrvt.cloudfront.net/KindlePreviewerInstaller.exe" -OutFile ".\KindlePreviewerInstaller.exe"
    - name: install Kindle Previewer
      run: Start-Process -FilePath ".\KindlePreviewerInstaller.exe" -ArgumentList "/S" -Wait
    - name: Add Kindle Previewer to PATH
      run: echo "$env:APPDATA\Amazon" >> $env:GITHUB_PATH
    #-----------------------------
    #Make the dictionaries on Windows
    #-----------------------------
    - name: make windows
      shell: wsl-bash {0}
      run: make ISWSL=TRUE
      env:
        MAKEFLAGS: -j2
        PYTHON3: /usr/bin/python3
    - name: Print conversion logs
      if: always()
      shell: wsl-bash {0}
      run: more ./out/*.csv ./out/logs/*.csv ./out/mobi/*.csv 2>/dev/null | cat
    - name: upload-artifact windows
      uses: actions/upload-artifact@v2
      with:
        name: mobi_windows
        path: '*.mobi'

  # See https://github.com/actions/upload-release-asset
  release:
    # https://github.community/t/trigger-job-on-tag-push-only/18076/2
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    needs: build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/download-artifact@v2
      id: download
      with:
        name: mobi
        path: artifacts
    - run: ls -lR ${{ steps.download.outputs.download-path }}
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: ${{ github.ref }}
        draft: true
        prerelease: false
    - name: Upload jmdict.mobi
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ steps.download.outputs.download-path }}/jmdict.mobi
        asset_name: jmdict.mobi
        asset_content_type: application/x-mobipocket-ebook
    - name: Upload jmnedict.mobi
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ steps.download.outputs.download-path }}/jmnedict.mobi
        asset_name: jmnedict.mobi
        asset_content_type: application/x-mobipocket-ebook
    - name: Upload combined.mobi
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ steps.download.outputs.download-path }}/combined.mobi
        asset_name: combined.mobi
        asset_content_type: application/x-mobipocket-ebook
